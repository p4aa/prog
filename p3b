(* Process control system calls: The demonstration of FORK, EXECVE and WAIT system calls along with zombie
and orphan states.
b. Implement the C program in which main program accepts an integer array. Main program uses the FORK system call to
create a new process called a child process. Parent process sorts an integer array and passes the sorted array to child process
through the command line argumentsof EXECVE system call. The child process uses EXECVE system call to load new program
that uses this sorted array for performing the binary search to search the particular item in the array.
 *)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

// Function to perform binary search on a sorted array
int binarySearch(int arr[], int low, int high, int key) {
    if (high >= low) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key)
            return mid;
        if (arr[mid] > key)
            return binarySearch(arr, low, mid - 1, key);
        return binarySearch(arr, mid + 1, high, key);
    }
    return -1;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <sorted_array> <key>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int *arr = (int *)malloc((argc - 2) * sizeof(int));
    for (int i = 0; i < argc - 2; i++) {
        arr[i] = atoi(argv[i + 1]);
    }
    int key = atoi(argv[argc - 1]);

    pid_t pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        printf("Child process id: %d\n", getpid());
        int result = binarySearch(arr, 0, argc - 3, key);
        if (result != -1) {
            printf("Element %d found at index %d.\n", key, result);
        } else {
            printf("Element %d not found.\n", key);
        }
    } else { // Parent process
        printf("Parent process id: %d\n", getpid());
        printf("Passing sorted array to child process...\n");
        execve(argv[0], argv, NULL);
        perror("execve"); // execve only returns on error
        exit(EXIT_FAILURE);
    }

    free(arr);
    return 0;
}
