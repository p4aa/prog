(* Implement a new system call in the kernel space, add this new system call in the Linux kernel by the compilation of this
kernel (any kernel source, any architecture and any Linux kernel distribution) and demonstrate the use of this embedded system call using
C program in user space.
 *)
```c
// sys_mysyscall.c (Kernel Space)

#include <linux/kernel.h>
#include <linux/syscalls.h>

asmlinkage long sys_mysyscall(int arg) {
    printk(KERN_INFO "My syscall was called with argument %d\n", arg);
    // Add your system call implementation here
    return 0; // Return appropriate value
}
```

```c
// mysyscall.h (Kernel Space)

#ifndef _MYSYSCALL_H_
#define _MYSYSCALL_H_

asmlinkage long sys_mysyscall(int arg);

#endif
```

```c
// user_program.c (User Space)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "mysyscall.h"

int main() {
    int ret = syscall(__NR_mysyscall, 42);
    if (ret == -1) {
        perror("Error calling mysyscall");
        exit(EXIT_FAILURE);
    }
    printf("Syscall returned %d\n", ret);
    return 0;
}
